name: "AdultPrime"
sceneByName:
  action: scrapeXPath
  queryURL: "https://adultprime.com/studios/search?q={}"
  scraper: sceneSearch

sceneByQueryFragment:
  action: scrapeXPath
  queryURL: "{url}"
  scraper: sceneScraper

sceneByURL:
  - action: scrapeXPath
    url:
      - adult-prime.com/video
      - adultprime.com/studios/video
    scraper: sceneScraper

xPathScrapers:
  sceneSearch:
    common:
      $scenes: //ul[@id="studio-videos-container"]
    scene:
      Title:
        selector: $scenes//span[contains(@class, "description-title")]/text()
      Date:
        selector: $scenes//span[@class="description-releasedate"]/text()
        postProcess:
          - parseDate: Jan 02, 2006
      URL:
        selector: $scenes//a[@class="absolute"]/@href
        postProcess:
          - replace:
              - regex: "^.signup.galleryId."
                with: "https://adultprime.com/studios/video/"
      Image: $scenes//div[contains(@class, 'ap-slider-img')]/@data-src

  sceneScraper:
    common:
      $scene: //div[@class="update-info-container"]
    scene:
      Title: //h1/text()
      Date:
        selector: //*[contains(@class, "fa-calendar")]/../b[contains(text(), "-")]/text()
        postProcess:
          - parseDate: 2006-01-02
      Details:
        selector: $scene//p[contains(@class,"ap-limited-description-text")]
        postProcess:
          - replace:
              # Hack to get multiple paragraphs: whenever we find a punctuation mark
              # immediately followed by a word character that means xpath.nodeText has
              # concatenated two paragraphs so we insert two newlines to fix that
              - regex: '([?!.])(\w)'
                with: "$1\n\n$2"
      Image:
        selector: //div[contains(@class, "video-item")]/@data-image
      URL: &url //link[@rel="canonical"]/@href
      Code:
        selector: *url
        postProcess:
          - replace:
              - regex: \D+(\d+)$
                with: $1
      Studio:
        Name:
          selector: //meta[@name="Keywords"]/@content
          postProcess:
            - replace: # get the last keyword in a list
                - regex: ^.*,\s*
                  with: ""
      Tags:
        Name:
          selector: $scene//b[contains(.,"Niches")]/following-sibling::text()
          split: ", "
      Performers:
        Name:
          selector: $scene//b[contains(.,"Niches")]/following-sibling::*[@class]/text()
          split: ", "
# Last Updated May 17, 2025
